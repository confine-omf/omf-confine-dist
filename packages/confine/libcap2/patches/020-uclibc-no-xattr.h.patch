--- a/libcap/cap_file.c
+++ b/libcap/cap_file.c
@@ -5,7 +5,9 @@
  */
 
 #include <sys/types.h>
+#ifndef __UCLIBC__
 #include <sys/xattr.h>
+#endif /* __UCLIBC__ */
 #include <byteswap.h>
 #include <sys/stat.h>
 #include <unistd.h>
@@ -47,7 +49,6 @@ static cap_t _fcaps_load(struct vfs_cap_
     bytes -= XATTR_CAPS_SZ_2;
     break;
 #endif
-
     default:
     cap_free(result);
     result = NULL;
@@ -174,6 +175,7 @@ static int _fcaps_save(struct vfs_cap_da
 
 cap_t cap_get_fd(int fildes)
 {
+#ifndef __UCLIBC__
     cap_t result;
 
     /* allocate a new capability set */
@@ -196,6 +198,10 @@ cap_t cap_get_fd(int fildes)
     }
 
     return result;
+#else
+    errno = ENOTSUP;
+    return NULL;
+#endif
 }
 
 /*
@@ -204,6 +210,7 @@ cap_t cap_get_fd(int fildes)
 
 cap_t cap_get_file(const char *filename)
 {
+#ifndef __UCLIBC__
     cap_t result;
 
     /* allocate a new capability set */
@@ -226,6 +233,10 @@ cap_t cap_get_file(const char *filename)
     }
 
     return result;
+#else
+    errno = ENOTSUP;
+    return NULL;
+#endif /* __UCLIBC__ */
 }
 
 /*
@@ -235,6 +246,7 @@ cap_t cap_get_file(const char *filename)
 
 int cap_set_fd(int fildes, cap_t cap_d)
 {
+#ifndef __UCLIBC__
     struct vfs_cap_data rawvfscap;
     int sizeofcaps;
     struct stat buf;
@@ -259,6 +271,10 @@ int cap_set_fd(int fildes, cap_t cap_d)
     _cap_debug("setting fildes capabilities");
 
     return fsetxattr(fildes, XATTR_NAME_CAPS, &rawvfscap, sizeofcaps, 0);
+#else
+    errno = ENOTSUP;
+    return -1;
+#endif /* __UCLIBC__ */
 }
 
 /*
@@ -267,6 +283,7 @@ int cap_set_fd(int fildes, cap_t cap_d)
 
 int cap_set_file(const char *filename, cap_t cap_d)
 {
+#ifndef __UCLIBC__
     struct vfs_cap_data rawvfscap;
     int sizeofcaps;
     struct stat buf;
@@ -290,6 +307,10 @@ int cap_set_file(const char *filename, c
 
     _cap_debug("setting filename capabilities");
     return setxattr(filename, XATTR_NAME_CAPS, &rawvfscap, sizeofcaps, 0);
+#else
+    errno = ENOTSUP;
+    return -1;
+#endif /* __UCLIBC__ */
 }
 
 #else /* ie. ndef VFS_CAP_U32 */
